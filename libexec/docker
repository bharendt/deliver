#!/usr/bin/env bash

BUILD_DOCKER=${BUILD_DOCKER:="false"}
DOCKERFILE=${DOCKERFILE:="$ORIGIN_DIR/Dockerfile"}
DOCKER_LOCAL_PORT=${DOCKER_LOCAL_PORT:=5478}
DOCKER_HOST="root@127.0.0.1:$DOCKER_LOCAL_PORT"

docker_build() {
  status "Building Docker image"

  if [[ ! -f "$DOCKERFILE" ]]
  then
    error "Could not find Dockerfile for path:\n$DOCKERFILE"
  fi

  # Defining the local variable first, so we can properly get the exit code using "$?"
  local _docker_build_result
  _docker_build_result=$(docker build -q -f $DOCKERFILE .)
  local _docker_build_exit_code=$?

  if [[ $_docker_build_exit_code == 1 ]]; then
    error "Could not build the image from Dockerfile ($DOCKERFILE)."
  fi

  DOCKER_IMAGE_HASH="$_docker_build_result"
}

__get_docker_image_hash() {
  # Only build when the image hash does not exist
  if [[ -z "$DOCKER_IMAGE_HASH" ]]
  then
    docker_build
  fi
}

docker_up() {
  # Only start a docker container when it has not started one already
  if [[ -z "$DOCKER_CONTAINER" ]]
  then
    __get_docker_image_hash

    status "Creating Docker container"
    DOCKER_CONTAINER=$(docker run --rm -d -p 127.0.0.1:$DOCKER_LOCAL_PORT:22 $DOCKER_IMAGE_HASH tail -f /dev/null)

    local _exit_code=$?

    echo "Exit code: $_exit_code"

    if [[ _exit_code == 1 ]]; then
      error "Could not create a new Docker container for image hash: $DOCKER_IMAGE_HASH"
    fi
  fi
}

docker_down() {
  if [[ -z "$DOCKER_CONTAINER" ]]; then
    # Only echo container related stuff whenever we actually built for Docker
    if [[ ! -z "$BUILD_DOCKER" ]]; then
      echo "Clean up: No running container to remove."
    fi

    exit 0
  fi

  docker kill $DOCKER_CONTAINER > /dev/null
  docker rm $DOCKER_CONTAINER > /dev/null
}

docker_exec() {
  docker_up

  docker exec $DOCKER_CONTAINER bash -c $@
}

docker_cp_to_container() {
  docker_up

  docker cp $1 $DOCKER_CONTAINER:$2
}

docker_cp_from_container() {
  docker_up

  docker cp $DOCKER_CONTAINER:$1 $2
}

# Make sure we always clean up the created docker container
# trap docker_down EXIT
